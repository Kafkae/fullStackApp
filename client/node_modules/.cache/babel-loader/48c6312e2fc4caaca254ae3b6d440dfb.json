{"ast":null,"code":"import React from'react';import Select from'react-select';export var CustomSelect=function CustomSelect(_ref){var placeholder=_ref.placeholder,field=_ref.field,form=_ref.form,options=_ref.options;var onChange=function onChange(option){form.setFieldValue(field.name,option.value);};var getValue=function getValue(){if(options){return options.find(function(option){return option.value===field.value;});}else{return'';}};return React.createElement(Select,{name:field.name,value:getValue(),onChange:onChange,placeholder:placeholder,options:options});};export default CustomSelect;","map":{"version":3,"sources":["/home/kafkae/projects/fullStackApp/client/src/components/Select/Select.tsx"],"names":["React","Select","CustomSelect","placeholder","field","form","options","onChange","option","setFieldValue","name","value","getValue","find"],"mappings":"AACA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,MAAP,KAAmB,cAAnB,CAoBA,MAAO,IAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,MAKH,IAJvBC,CAAAA,WAIuB,MAJvBA,WAIuB,CAHvBC,KAGuB,MAHvBA,KAGuB,CAFvBC,IAEuB,MAFvBA,IAEuB,CADvBC,OACuB,MADvBA,OACuB,CACvB,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,MAAD,CAA+B,CAC9CH,IAAI,CAACI,aAAL,CAAmBL,KAAK,CAACM,IAAzB,CAAgCF,MAAD,CAAmBG,KAAlD,EACD,CAFD,CAIA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CACrB,GAAIN,OAAJ,CAAa,CACX,MAAOA,CAAAA,OAAO,CAACO,IAAR,CAAa,SAACL,MAAD,QAAiBA,CAAAA,MAAM,CAACG,KAAP,GAAiBP,KAAK,CAACO,KAAxC,EAAb,CAAP,CACD,CAFD,IAEO,CACL,MAAO,EAAP,CACD,CACF,CAND,CAQA,MACE,qBAAC,MAAD,EACE,IAAI,CAAEP,KAAK,CAACM,IADd,CAEE,KAAK,CAAEE,QAAQ,EAFjB,CAGE,QAAQ,CAAEL,QAHZ,CAIE,WAAW,CAAEJ,WAJf,CAKE,OAAO,CAAEG,OALX,EADF,CASD,CA3BM,CA6BP,cAAeJ,CAAAA,YAAf","sourcesContent":["import { FieldProps } from 'formik';\nimport React from 'react';\nimport Select from 'react-select';\n\ntype OptionsType<OptionType> = ReadonlyArray<OptionType>;\n\nexport type ValueType<OptionType> =\n  | OptionType\n  | OptionsType<OptionType>\n  | null\n  | undefined;\n\ninterface Option {\n  label: string;\n  value: string;\n}\n\ninterface CustomSelectProps extends FieldProps {\n  options: OptionsType<Option>;\n  placeholder?: string;\n}\n\nexport const CustomSelect = ({\n  placeholder,\n  field,\n  form,\n  options\n}: CustomSelectProps) => {\n  const onChange = (option: ValueType<Option>) => {\n    form.setFieldValue(field.name, (option as Option).value);\n  };\n\n  const getValue = () => {\n    if (options) {\n      return options.find((option: any) => option.value === field.value);\n    } else {\n      return '' as any;\n    }\n  };\n\n  return (\n    <Select\n      name={field.name}\n      value={getValue()}\n      onChange={onChange}\n      placeholder={placeholder}\n      options={options}\n    />\n  );\n};\n\nexport default CustomSelect;\n"]},"metadata":{},"sourceType":"module"}