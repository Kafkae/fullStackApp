{"map":"{\"version\":3,\"sources\":[\"/home/kafkae/projects/ts-fullstack-app-notable/client/src/App.tsx\",\"/home/kafkae/projects/ts-fullstack-app-notable/client/src/serviceWorker.js\",\"/home/kafkae/projects/ts-fullstack-app-notable/client/src/index.tsx\"],\"names\":[\"App\",\"state\",\"physicians\",\"this\",\"fetchPhysicians\",\"id\",\"selectedPhysician\",\"fetchAppointments\",\"setState\",\"_this2\",\"isoFetch\",\"concat\",\"then\",\"res\",\"json\",\"calendar\",\"catch\",\"err\",\"_this3\",\"_this4\",\"_this$state\",\"react\",\"className\",\"Container\",\"fluid\",\"map\",\"doc\",\"key\",\"onClick\",\"e\",\"handlePhysicianClick\",\"name\",\"Table\",\"striped\",\"bordered\",\"hover\",\"appointments\",\"appointment\",\"order\",\"time\",\"kind\",\"React\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"registration\",\"unregister\"],\"mappings\":\"+QA2GeA,6MA7FNC,MAAkB,CACvBC,WAAY,uFAIZC,KAAKC,+DAGsBC,EAAYC,GACvCH,KAAKI,kBAAkBF,GACvBF,KAAKK,SAAS,CACZF,kBAAAA,8CAIsBD,GAAkB,IAAAI,EAAAN,KAC1CO,GAAAA,CAAQ,0CAAAC,OAA2CN,IAClDO,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAACG,GACLN,EAAKD,SAAS,CACZO,SAAAA,MAGHC,MAAM,SAAAC,GAAG,OAAIA,8CAGgB,IAAAC,EAAAf,KAC9BO,GAAAA,CAAS,wCACNE,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAACV,GACLgB,EAAKV,SAAS,CACZN,WAAAA,MAGHc,MAAM,SAAAC,GAAG,OAAIA,qCAGF,IAAAE,EAAAhB,KAAAiB,EACsCjB,KAAKF,MAAjDC,EADMkB,EACNlB,WAAYa,EADNK,EACML,SAAUT,EADhBc,EACgBd,kBAC9B,OACEe,EAAA,cAAA,MAAA,CAAKC,UAAU,OACbD,EAAA,cAACE,EAAA,EAAD,CAAWC,OAAK,GACdH,EAAA,cAAA,MAAA,CAAKC,UAAU,sBACbD,EAAA,cAAA,MAAA,CAAKC,UAAU,8CACbD,EAAA,cAAA,KAAA,CAAIC,UAAU,OAAd,cACAD,EAAA,cAAA,KAAA,CAAIC,UAAU,YACXpB,GAAcA,EAAWuB,IAAI,SAACC,GAC7B,OACEL,EAAA,cAAA,KAAA,CACEC,UAAU,qBACVK,IAAKD,EAAIrB,GACTuB,QAAS,SAACC,GAAuCV,EAAKW,qBAAqBJ,EAAIrB,GAAIqB,EAAIK,QAEtFL,EAAIK,UAMfV,EAAA,cAAA,MAAA,CAAKC,UAAU,qCACbD,EAAA,cAAA,KAAA,KAAKf,GACLe,EAAA,cAACW,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC3Bd,EAAA,cAAA,QAAA,KACEA,EAAA,cAAA,KAAA,KACEA,EAAA,cAAA,KAAA,KAAA,KACAA,EAAA,cAAA,KAAA,KAAA,QACAA,EAAA,cAAA,KAAA,KAAA,QACAA,EAAA,cAAA,KAAA,KAAA,UAGJA,EAAA,cAAA,QAAA,KACGN,GAAYA,EAASqB,aAAaX,IAAI,SAACY,GACtC,OACEhB,EAAA,cAAA,KAAA,CACEM,IAAKU,EAAYC,OAEjBjB,EAAA,cAAA,KAAA,KAAKgB,EAAYC,OACjBjB,EAAA,cAAA,KAAA,KAAKgB,EAAYN,MACjBV,EAAA,cAAA,KAAA,KAAKgB,EAAYE,MACjBlB,EAAA,cAAA,KAAA,KAAKgB,EAAYG,sBAjFvBC,EAAAA,iBCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,EAAAA,OACE1B,EAAA,cAAC2B,EAAD,MACAC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzC,KAAK,SAAA0C,GACjCA,EAAaC\",\"sourcesContent\":[\"import * as React from 'react';\\nimport './App.css';\\nimport isoFetch from 'isomorphic-fetch';\\nimport { Physician, Calendar } from '../../shared';\\nimport { Table, Container } from 'react-bootstrap';\\n\\nexport interface AppState {\\n  physicians: Physician[];\\n  calendar?: Calendar;\\n  selectedPhysician?: string;\\n}\\n\\nclass App extends React.Component<{}, AppState> {\\n\\n  public state: AppState = {\\n    physicians: []\\n  };\\n\\n  public componentDidMount() {\\n    this.fetchPhysicians();\\n  }\\n\\n  private handlePhysicianClick(id: number, selectedPhysician: string) {\\n    this.fetchAppointments(id);\\n    this.setState({\\n      selectedPhysician\\n    });\\n  }\\n\\n  private fetchAppointments(id: number): void {\\n    isoFetch(`http://localhost:3000/api/appointments/${id}`)\\n    .then(res => res.json())\\n    .then((calendar: Calendar) => {\\n      this.setState({\\n        calendar\\n      });\\n    })\\n    .catch(err => err);\\n  }\\n\\n  private fetchPhysicians(): void {\\n    isoFetch('http://localhost:3000/api/physicians')\\n      .then(res => res.json())\\n      .then((physicians: Physician[]) => {\\n        this.setState({\\n          physicians\\n        });\\n      })\\n      .catch(err => err);\\n  }\\n\\n  public render() {\\n    const { physicians, calendar, selectedPhysician } = this.state;\\n    return (\\n      <div className=\\\"App\\\">\\n        <Container fluid>\\n          <div className=\\\"flex-xl-nowrap row\\\">\\n            <div className=\\\"col-xl-2 col-md-3 col-12 p-0 App-sidePanel\\\">\\n              <h3 className=\\\"p-2\\\">PHYSICIANS</h3>\\n              <ul className=\\\"physList\\\">\\n                {physicians && physicians.map((doc) => {\\n                  return (\\n                    <li \\n                      className=\\\"physList-physician\\\"\\n                      key={doc.id} \\n                      onClick={(e: React.MouseEvent<HTMLElement>) => { this.handlePhysicianClick(doc.id, doc.name) }}\\n                    >\\n                      {doc.name}\\n                    </li>\\n                  );\\n                })}\\n              </ul>\\n            </div>\\n            <div className=\\\"col-xl-8 col-md-9 col-12 App-main\\\">\\n              <h1>{selectedPhysician}</h1>\\n              <Table striped bordered hover>\\n                <thead>\\n                  <tr>\\n                    <th>#</th>\\n                    <th>Name</th>\\n                    <th>Time</th>\\n                    <th>Kind</th>\\n                  </tr>\\n                </thead>\\n                <tbody>\\n                  {calendar && calendar.appointments.map((appointment) => {\\n                    return (\\n                      <tr \\n                        key={appointment.order} \\n                      >\\n                        <td>{appointment.order}</td>\\n                        <td>{appointment.name}</td>\\n                        <td>{appointment.time}</td>\\n                        <td>{appointment.kind}</td>\\n                      </tr>\\n                    );\\n                  })}\\n                </tbody>\\n              </Table>\\n            </div>\\n          </div>\\n        </Container>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default App;\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import * as React from 'react';\\nimport * as ReactDOM from 'react-dom';\\nimport App from './App';\\nimport './index.css';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(\\n  <App />,\\n  document.getElementById('root') as HTMLElement\\n);\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{15:function(e,t,n){e.exports=n(24)},21:function(e,t,n){},23:function(e,t,n){},24:function(e,t,n){\"use strict\";n.r(t);var a=n(0),c=n(8),l=n(9),i=n(10),r=n(13),o=n(11),s=n(14),h=(n(21),n(6)),u=n.n(h),m=n(26),p=n(27),d=function(e){function t(){var e,n;Object(l.a)(this,t);for(var a=arguments.length,c=new Array(a),i=0;i<a;i++)c[i]=arguments[i];return(n=Object(r.a)(this,(e=Object(o.a)(t)).call.apply(e,[this].concat(c)))).state={physicians:[]},n}return Object(s.a)(t,e),Object(i.a)(t,[{key:\"componentDidMount\",value:function(){this.fetchPhysicians()}},{key:\"handlePhysicianClick\",value:function(e,t){this.fetchAppointments(e),this.setState({selectedPhysician:t})}},{key:\"fetchAppointments\",value:function(e){var t=this;u()(\"http://localhost:3000/api/appointments/\".concat(e)).then(function(e){return e.json()}).then(function(e){t.setState({calendar:e})}).catch(function(e){return e})}},{key:\"fetchPhysicians\",value:function(){var e=this;u()(\"http://localhost:3000/api/physicians\").then(function(e){return e.json()}).then(function(t){e.setState({physicians:t})}).catch(function(e){return e})}},{key:\"render\",value:function(){var e=this,t=this.state,n=t.physicians,c=t.calendar,l=t.selectedPhysician;return a.createElement(\"div\",{className:\"App\"},a.createElement(m.a,{fluid:!0},a.createElement(\"div\",{className:\"flex-xl-nowrap row\"},a.createElement(\"div\",{className:\"col-xl-2 col-md-3 col-12 p-0 App-sidePanel\"},a.createElement(\"h3\",{className:\"p-2\"},\"PHYSICIANS\"),a.createElement(\"ul\",{className:\"physList\"},n&&n.map(function(t){return a.createElement(\"li\",{className:\"physList-physician\",key:t.id,onClick:function(n){e.handlePhysicianClick(t.id,t.name)}},t.name)}))),a.createElement(\"div\",{className:\"col-xl-8 col-md-9 col-12 App-main\"},a.createElement(\"h1\",null,l),a.createElement(p.a,{striped:!0,bordered:!0,hover:!0},a.createElement(\"thead\",null,a.createElement(\"tr\",null,a.createElement(\"th\",null,\"#\"),a.createElement(\"th\",null,\"Name\"),a.createElement(\"th\",null,\"Time\"),a.createElement(\"th\",null,\"Kind\"))),a.createElement(\"tbody\",null,c&&c.appointments.map(function(e){return a.createElement(\"tr\",{key:e.order},a.createElement(\"td\",null,e.order),a.createElement(\"td\",null,e.name),a.createElement(\"td\",null,e.time),a.createElement(\"td\",null,e.kind))})))))))}}]),t}(a.Component);n(23),Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));c.render(a.createElement(d,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[15,1,2]]]);","extractedComments":[]}